# Build customization
builds:
  - binary: sopstool
    goos:
      - darwin
      - linux
    goarch:
      - amd64

archives:
  - id: zips
    name_template: "{{ .ProjectName }}_{{ .Os }}"

checksum:
  # You can change the name of the checksums file.
  # This is parsed with the Go template engine and the following variables
  # are available:
  # - ProjectName
  # - Tag
  # - Version (Git tag without `v` prefix)
  # - Env (environment variables)
  # Default is `{{ .ProjectName }}_{{ .Version }}_checksums.txt`.
  name_template: "{{ .ProjectName }}_checksums.txt"

nfpms:
  - name_template: "{{ .ProjectName }}_{{ .Os }}"
    vendor: Ibotta
    homepage: https://github.com/Ibotta/sopstool
    maintainer: Ibotta <oss@ibotta.com>
    description: "A multi-file wrapper for Mozilla sops"
    license: Apache 2.0
    # Formats to be generated.
    formats:
      - deb
      - rpm
    # Packages your package depends on.
    dependencies:
      - sops

brews:
  - github:
      # Repo to push the tap
      owner: Ibotta
      name: homebrew-public
    # Git author used to commit to the repository.
    commit_author:
      name: sopstoolGoreleaser
      email: oss@ibotta.com
    # Folder inside the repository to put the formula.
    folder: Formula
    # caveats: "How to use this binary"
    homepage: "https://github.com/Ibotta/sopstool"
    description: "A multi-file wrapper for Mozilla sops"
    # Setting this will prevent goreleaser to actually try to commit the updated
    # formula - instead, the formula file will be stored on the dist folder only,
    # leaving the responsibility of publishing it to the user.
    # Default is false.
    skip_upload: false
    # Packages your package depends on.
    dependencies:
      - sops
    # So you can `brew test` your formula.
    test: |
      system "#{bin}/sopstool version"

s3:
  # You can have multiple s3 configs
  -
    # Bucket name (without the s3:// prefix)
    bucket: oss-pkg.ibotta.com
    # AWS Region to use.
    region: us-east-1
    # path inside the bucket.
    # This is parsed with the Go template engine and the following variables
    # are available:
    # - ProjectName
    # - Tag
    # - Version (Git tag without `v` prefix)
    # There is also a template function "time" that takes a Go time format
    # string to insert a formated timestamp into the release name.
    # Default is `{{ .ProjectName }}/{{ .Tag }}`
    # folder:
  -
    bucket: oss-pkg.ibotta.com
    region: us-east-1
    folder: "{{ .ProjectName }}"

dockers:
  - goos: linux
    # GOARCH of the built binary that should be used.
    goarch: amd64
    # GOARM of the built binary that should be used.
    goarm: ''
    # Name templates of the built binaries that should be used.
    binaries:
    - sopstool
    # Templates of the Docker image names.
    image_templates:
    - "ibotta/{{ .ProjectName }}:latest"
    - "ibotta/{{ .ProjectName }}:{{ .Version }}"
    # Skips the docker push. Could be useful if you also do draft releases.
    # If set to auto, the release will not be pushed to the docker repository
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    # Defaults to false.
    skip_push: false
    # Path to the Dockerfile (from the project root).
    dockerfile: Dockerfile
    # Template of the docker build flags.
    build_flag_templates:
    - "--label=org.label-schema.schema-version=1.0"
    - "--label=org.label-schema.version={{.Version}}"
    - "--label=org.label-schema.name={{.ProjectName}}"
    # If your Dockerfile copies files other than the binary itself,
    # you should list them here as well.
    # Note that goreleaser will create the same structure inside the temporary
    # folder, so if you add `foo/bar.json` here, on your Dockerfile you can
    # `COPY foo/bar.json /whatever.json`.
    # Also note that the paths here are relative to the folder in which
    # goreleaser is being run.
    # This field does not support wildcards, you can add an entire folder here
    # and use wildcards when you `COPY`/`ADD` in your Dockerfile.
    extra_files:
    - sopsinstall.sh
