// Code generated by MockGen. DO NOT EDIT.
// Source: execwrap.go

// Package mock_execwrap is a generated GoMock package.
package mock_execwrap

import (
	gomock "github.com/golang/mock/gomock"
	os "os"
	exec "os/exec"
	reflect "reflect"
)

// MocksystemExec is a mock of systemExec interface
type MocksystemExec struct {
	ctrl     *gomock.Controller
	recorder *MocksystemExecMockRecorder
}

// MocksystemExecMockRecorder is the mock recorder for MocksystemExec
type MocksystemExecMockRecorder struct {
	mock *MocksystemExec
}

// NewMocksystemExec creates a new mock instance
func NewMocksystemExec(ctrl *gomock.Controller) *MocksystemExec {
	mock := &MocksystemExec{ctrl: ctrl}
	mock.recorder = &MocksystemExecMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocksystemExec) EXPECT() *MocksystemExecMockRecorder {
	return m.recorder
}

// Command mocks base method
func (m *MocksystemExec) Command(name string, arg ...string) *exec.Cmd {
	varargs := []interface{}{name}
	for _, a := range arg {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Command", varargs...)
	ret0, _ := ret[0].(*exec.Cmd)
	return ret0
}

// Command indicates an expected call of Command
func (mr *MocksystemExecMockRecorder) Command(name interface{}, arg ...interface{}) *gomock.Call {
	varargs := append([]interface{}{name}, arg...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MocksystemExec)(nil).Command), varargs...)
}

// Exec mocks base method
func (m *MocksystemExec) Exec(argv0 string, argv, envv []string) error {
	ret := m.ctrl.Call(m, "Exec", argv0, argv, envv)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exec indicates an expected call of Exec
func (mr *MocksystemExecMockRecorder) Exec(argv0, argv, envv interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MocksystemExec)(nil).Exec), argv0, argv, envv)
}

// Create mocks base method
func (m *MocksystemExec) Create(name string) (*os.File, error) {
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MocksystemExecMockRecorder) Create(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MocksystemExec)(nil).Create), name)
}

// LookPath mocks base method
func (m *MocksystemExec) LookPath(name string) (string, error) {
	ret := m.ctrl.Call(m, "LookPath", name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LookPath indicates an expected call of LookPath
func (mr *MocksystemExecMockRecorder) LookPath(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookPath", reflect.TypeOf((*MocksystemExec)(nil).LookPath), name)
}

// Environ mocks base method
func (m *MocksystemExec) Environ() []string {
	ret := m.ctrl.Call(m, "Environ")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Environ indicates an expected call of Environ
func (mr *MocksystemExecMockRecorder) Environ() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environ", reflect.TypeOf((*MocksystemExec)(nil).Environ))
}

// MockexecutionWrapper is a mock of executionWrapper interface
type MockexecutionWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockexecutionWrapperMockRecorder
}

// MockexecutionWrapperMockRecorder is the mock recorder for MockexecutionWrapper
type MockexecutionWrapperMockRecorder struct {
	mock *MockexecutionWrapper
}

// NewMockexecutionWrapper creates a new mock instance
func NewMockexecutionWrapper(ctrl *gomock.Controller) *MockexecutionWrapper {
	mock := &MockexecutionWrapper{ctrl: ctrl}
	mock.recorder = &MockexecutionWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockexecutionWrapper) EXPECT() *MockexecutionWrapperMockRecorder {
	return m.recorder
}

// RunCommandDirect mocks base method
func (m *MockexecutionWrapper) RunCommandDirect(command []string) error {
	ret := m.ctrl.Call(m, "RunCommandDirect", command)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommandDirect indicates an expected call of RunCommandDirect
func (mr *MockexecutionWrapperMockRecorder) RunCommandDirect(command interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommandDirect", reflect.TypeOf((*MockexecutionWrapper)(nil).RunCommandDirect), command)
}

// RunCommandStdoutToFile mocks base method
func (m *MockexecutionWrapper) RunCommandStdoutToFile(outfileName string, command []string) error {
	ret := m.ctrl.Call(m, "RunCommandStdoutToFile", outfileName, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunCommandStdoutToFile indicates an expected call of RunCommandStdoutToFile
func (mr *MockexecutionWrapperMockRecorder) RunCommandStdoutToFile(outfileName, command interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCommandStdoutToFile", reflect.TypeOf((*MockexecutionWrapper)(nil).RunCommandStdoutToFile), outfileName, command)
}

// RunSyscallExec mocks base method
func (m *MockexecutionWrapper) RunSyscallExec(args []string) error {
	ret := m.ctrl.Call(m, "RunSyscallExec", args)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSyscallExec indicates an expected call of RunSyscallExec
func (mr *MockexecutionWrapperMockRecorder) RunSyscallExec(args interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSyscallExec", reflect.TypeOf((*MockexecutionWrapper)(nil).RunSyscallExec), args)
}
